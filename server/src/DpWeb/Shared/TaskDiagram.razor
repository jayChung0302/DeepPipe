@using DpDb

<svg width="100%"
     height="@SvgHeight">
    <rect width="@PipeWidth"
          height="100%"
          fill="gold"
          x="calc(50% - @PipeWidth * 0.5)" />
    @for (int i = 0; i < Defects.Length; i += 2)
    {
        int baseY = i / 2 * BlockHeight;
        <svg x="0"
             y="@baseY"
             width="calc(50% - @PipeWidth * 0.5)"
             height="@BlockHeight">
            <image width="100%"
                   height="80%"
                   href="data:image/png;base64, @(Convert.ToBase64String(Defects[i].Image))" />
            <text x="50%"
                  y="90%"
                  text-anchor="middle">
                @ToImageDescription(Defects[i])
            </text>
        </svg>
        @if (i + 1 < Defects.Length)
        {
            <svg x="calc(50% + @PipeWidth * 0.5)"
                 y="@baseY"
                 width="calc(50% - @PipeWidth * 0.5)"
                 height="@BlockHeight">
                <image width="100%"
                       height="80%"
                       href="data:image/png;base64, @(Convert.ToBase64String(Defects[i + 1].Image))" />
                <text x="50%"
                      y="90%"
                      text-anchor="middle">
                    @ToImageDescription(Defects[i + 1])
                </text>
            </svg>
        }
    }
</svg>

@code {
    [Parameter] public Defect[] Defects { get; set; } = Array.Empty<Defect>();
    [Parameter] public int PipeWidth { get; set; } = 20;
    [Parameter] public int ImageHeight { get; set; } = 256;
    [Parameter] public int TextHeight { get; set; } = 64;
    public int BlockHeight => ImageHeight + TextHeight;
    public int SvgHeight => ((Defects.Count() + 1) / 2) * BlockHeight;
    private static string ToImageDescription(Defect defect)
    {
        return $"{defect.DefectName} [{TimeSpan.FromSeconds(defect.Timestamp):hh\\:mm\\:ss}]";
    }
}
